#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {
   static std::vector<uint8_t> worbli_reg_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/worbli.reg/worbli.reg.wasm"); }
   static std::vector<char>    worbli_reg_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/worbli.reg/worbli.reg.abi"); }
   static std::vector<uint8_t> worbli_prov_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/worbli.prov/worbli.prov.wasm"); }
   static std::vector<char>    worbli_prov_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/worbli.prov/worbli.prov.abi"); }
   static std::vector<uint8_t> client_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/client/client.wasm"); }
   static std::vector<char>    client_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/client/client.abi"); }
   static std::vector<uint8_t> worbli_resource_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/worbli.resource/worbli.resource.wasm"); }
   static std::vector<char>    worbli_resource_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/worbli.resource/worbli.resource.abi"); }

   struct util {
      static std::vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.token/eosio.token.wasm"); }
      static std::vector<char>    token_abi() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.token/eosio.token.abi"); }
      static std::vector<uint8_t> bios_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.bios/eosio.bios.wasm"); }
      static std::vector<char>    bios_abi() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.bios/eosio.bios.abi"); }
      static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system/eosio.system.wasm"); }
      static std::vector<char>    system_abi() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system/eosio.system.abi"); }
   };

};
}} //ns eosio::testing
